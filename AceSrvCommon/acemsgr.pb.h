// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acemsgr.proto

#ifndef PROTOBUF_acemsgr_2eproto__INCLUDED
#define PROTOBUF_acemsgr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace acemsgr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_acemsgr_2eproto();
void protobuf_AssignDesc_acemsgr_2eproto();
void protobuf_ShutdownFile_acemsgr_2eproto();

class Status;
class Login;

enum Status_StatusType {
  Status_StatusType_OK = 0,
  Status_StatusType_FAILED = 1
};
bool Status_StatusType_IsValid(int value);
const Status_StatusType Status_StatusType_StatusType_MIN = Status_StatusType_OK;
const Status_StatusType Status_StatusType_StatusType_MAX = Status_StatusType_FAILED;
const int Status_StatusType_StatusType_ARRAYSIZE = Status_StatusType_StatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_StatusType_descriptor();
inline const ::std::string& Status_StatusType_Name(Status_StatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_StatusType_descriptor(), value);
}
inline bool Status_StatusType_Parse(
    const ::std::string& name, Status_StatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_StatusType>(
    Status_StatusType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Status_StatusType StatusType;
  static const StatusType OK = Status_StatusType_OK;
  static const StatusType FAILED = Status_StatusType_FAILED;
  static inline bool StatusType_IsValid(int value) {
    return Status_StatusType_IsValid(value);
  }
  static const StatusType StatusType_MIN =
    Status_StatusType_StatusType_MIN;
  static const StatusType StatusType_MAX =
    Status_StatusType_StatusType_MAX;
  static const int StatusType_ARRAYSIZE =
    Status_StatusType_StatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusType_descriptor() {
    return Status_StatusType_descriptor();
  }
  static inline const ::std::string& StatusType_Name(StatusType value) {
    return Status_StatusType_Name(value);
  }
  static inline bool StatusType_Parse(const ::std::string& name,
      StatusType* value) {
    return Status_StatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .acemsgr.Status.StatusType type = 1 [default = OK];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::acemsgr::Status_StatusType type() const;
  inline void set_type(::acemsgr::Status_StatusType value);

  // @@protoc_insertion_point(class_scope:acemsgr.Status)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_acemsgr_2eproto();
  friend void protobuf_AssignDesc_acemsgr_2eproto();
  friend void protobuf_ShutdownFile_acemsgr_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:acemsgr.Login)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* email_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_acemsgr_2eproto();
  friend void protobuf_AssignDesc_acemsgr_2eproto();
  friend void protobuf_ShutdownFile_acemsgr_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// ===================================================================


// ===================================================================

// Status

// required .acemsgr.Status.StatusType type = 1 [default = OK];
inline bool Status::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::acemsgr::Status_StatusType Status::type() const {
  // @@protoc_insertion_point(field_get:acemsgr.Status.type)
  return static_cast< ::acemsgr::Status_StatusType >(type_);
}
inline void Status::set_type(::acemsgr::Status_StatusType value) {
  assert(::acemsgr::Status_StatusType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:acemsgr.Status.type)
}

// -------------------------------------------------------------------

// Login

// required int32 id = 1;
inline bool Login::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Login::id() const {
  // @@protoc_insertion_point(field_get:acemsgr.Login.id)
  return id_;
}
inline void Login::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:acemsgr.Login.id)
}

// required string name = 2;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:acemsgr.Login.name)
  return *name_;
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:acemsgr.Login.name)
}
inline void Login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:acemsgr.Login.name)
}
inline void Login::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:acemsgr.Login.name)
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:acemsgr.Login.name)
  return name_;
}
inline ::std::string* Login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:acemsgr.Login.name)
}

// optional string email = 3;
inline bool Login::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Login::email() const {
  // @@protoc_insertion_point(field_get:acemsgr.Login.email)
  return *email_;
}
inline void Login::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:acemsgr.Login.email)
}
inline void Login::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:acemsgr.Login.email)
}
inline void Login::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:acemsgr.Login.email)
}
inline ::std::string* Login::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:acemsgr.Login.email)
  return email_;
}
inline ::std::string* Login::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:acemsgr.Login.email)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace acemsgr

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acemsgr::Status_StatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acemsgr::Status_StatusType>() {
  return ::acemsgr::Status_StatusType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_acemsgr_2eproto__INCLUDED
